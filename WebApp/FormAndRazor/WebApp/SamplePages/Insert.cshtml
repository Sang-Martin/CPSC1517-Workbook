@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD - Insert";

    var thebutton = Request.Form["theButton"];
    var productname = "";
    var supplierid = "";
    var categoryid = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var discontinued = "";

    //obtain the record collections (dataset) for the supplierid and categoryid
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
            FROM Suppliers
            Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
            FROM Categories
            Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    //Using Validation Controls

    //Validation controls execute BOTH on the client-side and server-side
    //see: https://www.mikesdotnetting.com/article/191/validation-in-razor-web-pages-2
    //Validation controls can be used with HTML5
    //3 components to Validation controls
    //  a) the validation
    //  b) a place to report the error
    //  c) command to execute validation
    //Validation controls (exepted for Required) only kick in if data is present 
    //To execute the validation control, you will need to have a command (c) in your code call Validation.IsValid()

    //Required and StringLength
    Validation.Add("ProductName",
        Validator.Required("Product name is a required field"),
        Validator.StringLength(40, 1, "Product name is limited to 40 characters"));

    Validation.Add("QuantityPerUnit",
        Validator.StringLength(20, 0, "Quantity per unit is limited to 20 characters"));

    //nullable money field
    //in this example UnitPrice has been validated using HTML5
    //  therefore, this validation will always be good for datatype
    //.Range her is being used use for indicating a "floor" with a max "Ceiling"
    Validation.Add("UnitPrice",
        Validator.Decimal("Unit Price must be a dollar amount"),
        Validator.Range(0.00, double.MaxValue, "Unit Price must be greater or equal to 0.00"));

    //the UnitsInStock, UnitsOnOrder, ReorderLevel are smallint on the database (max 32757)
    Validation.Add("UnitsInStock",
        Validator.Integer("Unit in stock must be a dollar amount"),
        Validator.Range(0, 32767, "Unit in stock must be greater or equal to 0"));

    Validation.Add("UnitsOnOrder",
        Validator.Integer("Unit on order must be a dollar amount"),
        Validator.Range(0, 32767, "Unit on order must be greater or equal to 0"));

    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder Level must be a dollar amount"),
        Validator.Range(0, 32767, "Reorder Level must be greater or equal to 0"));


    //pattern matching using RegEx() regular expression
    //lets assume we have a field called Email
    //HTML5 could validate field using type="email"
    //Validation controls would use .RegEx(expression, message)
    //see email matching expressions https://emailregex.com
    //Validation.Add("Email"),
    //  Validator.RegEx(@"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$", "Invalid email"));
    //postal code
    //Validation.Add("PostalCode",
    //  Validator.RegEx(@"[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]", "Invalid postal code (T9T9T9)"));

    //comparing two fields
    //example password and confirm password
    //Validation.Add("ConfirmPassword",
    //  Validator.EuqalsTo("Password", "Password is not confirmed. Try again!"));
}


@section banner{
    <h1>CRUD - Insert</h1>
    <blockquote class="alert alert-info">
        This form will  demonstrate the create (insert) of CRUD. It will demonstrate
        using bootstrap text alignment for setting up right aligned text, default
        left aligned web controls and centered aligned buttons. The Input controls
        and their label text controls are in a 2 column format. The submit buttons
        are centered on another row. Tool tips are used on the web controls as are
        placeholder prases. Try/Catch will be used to capture processing errors.
        <br /><br />
        The Products table will be maintained. It has a primary identity key. Thus, no need for a
        field for the primay key is required on this form. This form ONLY does insert. However,
        if you wished to have a field to display the new primary key when it is created,
        you could create a &ltLabel&gt field for the output display of the primary key.
    </blockquote>
}

@if (IsPost)
{
    //the form has multiple buttons
    //determine which button was pressed THEN do that action
    if (thebutton.Equals("clear"))
    {
        //remove the current values in the input/select fields
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
        discontinued = "";
    }
    else
    {
        //process the data to add to the database
        //retrieve the data from the controls
        productname = Request.Form["ProductName"];
        supplierid = Request.Form["SupplierList"];
        categoryid = Request.Form["CategoryList"];
        quantityperunit = Request.Form["QuantityPerUnit"];
        unitprice = Request.Form["UnitPrice"];
        unitsinstock = Request.Form["UnitsInStock"];
        unitsonorder = Request.Form["UnitsOnOrder"];
        reorderlevel = Request.Form["ReorderLevel"];
        discontinued = Request.Form["Discontinued"];
        //check any validation (validation controls)
        //execute the command Validation.IsValid() to cause the execution of your validation controls
        //WARNING: without this command your validation controls DO NOT run
        if (Validation.IsValid())
        {
            //if good
            //   within try/catch
            try
            {
                //you MAY need to do additional LOGICAL validation
                //example: Lets assume that the supplier id is a required field
                //          Lets assume the validation was not performed by
                //          HTML5 or unit validation controls
                if (string.IsNullOrEmpty(supplierid) || int.Parse(supplierid) == 0)
                {
                    throw new Exception("Invalid supplier ID. Please select from the supplied list");
                }

                //      create the sql insert command
                var insertcommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID,
                        QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder,
                        ReorderLevel, Discontinued)
                    VALUES(@0, @1, @2, @3, @4, @5, @6, @7, @8)";
                //      execute the command
                //      to execute an insert, update or deleted command, use: .Execute()
                db.Execute(insertcommand, productname,
                    int.Parse(supplierid) == -1 ? null : supplierid,
                    int.Parse(categoryid) == -1 ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? "0.00" : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                    0);
                //      issue a success message
                //      retrieve the new identity primary key value
                var lastprimarykeyvalue = db.GetLastInsertId();
                //      message
            <p class="col-12 text-center">
                <span style="color:forestgreen">
                    <strong>New Product Added: ID of @lastprimarykeyvalue</strong>
                </span>
            </p>
            }
            catch (Exception ex)
            {
                //      catch: display the error
            <p class="col-12 text-center">
                <span style="color:firebrick">
                    <strong>Error: @ex.Message</strong>
                </span>
            </p>
            }
        }
    }
}
else
{
    //to initialize fields on the your form during the 1st pass of the page
    productname = "";
    supplierid = "0";
    categoryid = "0";
    quantityperunit = "";
    unitprice = "";
    unitsinstock = "";
    unitsonorder = "";
    reorderlevel = "";
    discontinued = "";
}

@* using the ValidationSummary() control, you will automatically see a bulleted list of error messages from your validation controls
    REMINDER: this control needs to be place on your web page AFTER the Validation.IsValid() command*@
@Html.ValidationSummary()
<form id="theForm" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductName">Name: </label><br />
            <label for="SupplierList">Supplier: </label><br />
            <label for="CategoryID">Category: </label><br />
            <label for="QuantityPerUnit">Qty/Unit: </label><br />
            <label for="UnitPrice">Price: </label><br />
            <label for="UnitsInStock">QoH: </label><br />
            <label for="UnitsOnOrder">QOO: </label><br />
            <label for="ReorderLevel">RoL: </label><br />
            <label for="Discontinued">Disc.: </label><br /><br />
        </div>
        <div class="col-md-6">
            @* the title= parameter is the control's ToolTip *@
            <input type="text" id="ProductName" name="ProductName"
                   placeholder="enter product name" title="Product Name"
                   value="@productname" /><br />
            @* optionally, you could place your error message right beside the control that is in error *@
            @* Syntax: Html.ValidationMessage("fieldname", "error message") *@
            @Html.ValidationMessage("ProductName", " * ")
            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier ...</option>
                @* this option is used by the user to select the
                    possibility of having no foreign key*@
                <option value="-1">None</option>
                @* traverse the collection adding one option tag
                     per collection item (record)
                    set up the ddl to retain the selected value*@
                @foreach (var supplierItem in supplierlist)
                {
                    if (supplierid.Equals(supplierItem.SupplierID.ToString()))
                    {
                        <option value="@supplierItem.SupplierID" selected>
                            @supplierItem.CompanyName
                        </option>
                    }
                    else
                    {
                        <option value="@supplierItem.SupplierID">
                            @supplierItem.CompanyName
                        </option>
                    }
                }

            </select><br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category ...</option>
                @* this option is used by the user to select the
                    possibility of having no foreign key*@
                <option value="-1">None</option>
                @* traverse the collection adding one option tag
                     per collection item (record)
                    set up the ddl to retain the selected value*@
                @foreach (var categoryItem in categorylist)
                {
                    if (categoryid.Equals(categoryItem.CategoryID.ToString()))
                    {
                        <option value="@categoryItem.CategoryID" selected>
                            @categoryItem.CategoryName
                        </option>
                    }
                    else
                    {
                        <option value="@categoryItem.CategoryID">
                            @categoryItem.CategoryName
                        </option>
                    }
                }
            </select><br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit"
                   value="@quantityperunit" /><br />
            @* HTML5 client side browser validation restrict the input to a number (type="number")
                this field requires a decimal number; the default of "number" is integer;
                to get around this problem use the step='n' parameter; in this case n will be 0.01
                - this field is nullable BUT if it was required you could use the keyword: required
                - If there was a price range, you could use min='n' add/or max='n'*@
            <input type="number" id="UnitPrice" name="UnitPrice" step="0.01" min="0.00"
                   value="@unitprice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock"
                   value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder"
                   value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel"
                   value="@reorderlevel" /><br />
            <input type="checkbox" id="Discontinued" name="Discontinued"
                   @(string.IsNullOrEmpty(discontinued) ? "" : "checked") /> (discontinued if checked)<br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" name="theButton" id="theButton" value="submit"
                    class="btn btn-primary">
                Submit
            </button>&nbsp;&nbsp;
            @* the parameter formnovalidate will tell your browser NOT to validate HTML5 validation.
                Since validation controls are executed by Validation.IsValid(), properly implemented logic will ensure whether
                the validation controls are executed or NOT.*@
            <button type="submit" name="theButton" id="theButton" value="clear"
                    class="btn btn-light" formnovalidate>
                Clear
            </button>
        </div>
    </div>
</form>